name: Publish NuGet Package to GitHub Packages and NuGet.org

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Extract Version from .csproj
        id: get_version
        run: |
          $ErrorActionPreference = "Stop"
          Write-Host "Current directory: $(Get-Location)"
          Write-Host "Listing files in current directory:"
          Get-ChildItem

          $projectFilePath = "Rustify.csproj"
          if (-not (Test-Path $projectFilePath)) {
            Write-Error "$projectFilePath not found!"
            exit 1
          }
          
          $version = ""
          try {
            $projectFileContent = Get-Content -Path $projectFilePath -Raw
            $xml = [xml]$projectFileContent
            $version = $xml.Project.PropertyGroup.Version
          } catch {
            Write-Error "Failed to parse version from $projectFilePath. Error: $_"
            exit 1
          }

          if (-not $version) {
            Write-Error "Version could not be extracted or is empty in $projectFilePath."
            exit 1
          }
          
          Write-Host "Successfully extracted version: '$version'"
          echo "VERSION=$version" >> $GITHUB_OUTPUT
        shell: pwsh

      - name: Create Git Tag if version changed
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $ErrorActionPreference = "Stop"
          $extractedVersion = "${{ steps.get_version.outputs.VERSION }}"
          
          Write-Host "Version received from 'Extract Version' step: '$extractedVersion'"

          if (-not $extractedVersion) {
            Write-Error "Error: Extracted version is empty. Cannot create tag."
            exit 1
          }

          $tagName = "v$extractedVersion"
          Write-Host "Attempting to create or check tag: '$tagName'"

          $tagExistsLocally = $false
          try {
            git rev-parse $tagName | Out-Null
            $tagExistsLocally = $true
          } catch {
            
          }

          if ($tagExistsLocally) {
            Write-Host "Tag '$tagName' already exists locally. Skipping tag creation and push."
          } else {
            Write-Host "Tag '$tagName' does not exist locally. Creating tag..."
            git config user.name "${{ github.actor }}"
            git config user.email "${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"
            git tag "$tagName" -m "Release version $tagName"
            Write-Host "Created tag '$tagName' locally."

            Write-Host "Pushing tag '$tagName' to origin..."
            git push origin "$tagName"
            Write-Host "Successfully pushed tag '$tagName'."
          }
        shell: pwsh

      - name: Restore dependencies
        run: dotnet restore Rustify.csproj

      - name: Build for .NET 7.0
        run: dotnet build Rustify.csproj --configuration Release --no-restore -f net7.0

      - name: Build for .NET 8.0
        run: dotnet build Rustify.csproj --configuration Release --no-restore -f net8.0

      - name: Build for .NET 9.0
        run: dotnet build Rustify.csproj --configuration Release --no-restore -f net9.0

      - name: Pack
        run: dotnet pack Rustify.csproj --configuration Release --no-build --output ./nupkgs

      - name: Publish to GitHub Packages
        run: dotnet nuget push ./nupkgs/*.nupkg --api-key ${{ secrets.GITHUB_TOKEN }} --source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" --skip-duplicate

      - name: Publish to NuGet.org
        env:
          NUGET_API_KEY_ENV: ${{ secrets.NUGET_API_KEY }}
        if: ${{ startsWith(github.ref, 'refs/tags/v') && env.NUGET_API_KEY_ENV != '' }}
        run: dotnet nuget push ./nupkgs/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source "https://api.nuget.org/v3/index.json" --skip-duplicate